$if not isLua then
//(C)2014 Juan Carlos Gonz√°lez Amestoy
#import <Foundation/Foundation.h>
#import "rvmMachineProtocol.h"

#import "z80.h"
#import "rvmTapeDecoderProtocol.h"
#import "rvmAY3819X.h"
#import "rvmAudioMixer.h"

$if machineIs('128k','+2A','+3','inves') then
#import "spectrum48k.h"
$end

$if machineIs('+3') then
#import "rvmUpd765.h"
$end

$else
--(C)2014 Juan Carlos Gonzalez Amestoy
local ffi=require('ffi')

ffi.cdef[[

typedef void* rvmTapeDecoderProtocolS;
typedef void z80;
typedef void rvmAY3819XT;
typedef void rvmUpd765S;
typedef void rvmAudioMixerS;

$end

struct _[=$structName$];

$if machineIs('48k') or isLua then
typedef uint32_t* (*rvmSpeccyStep)(void *speccy,bool fast,uint32_t* buffer);
$end
typedef struct _[=$structName$]
{
  uint32_t border,bcol,bl;
  uint32_t fg,bg;
  int t,flash,T,M,frame,so,soundIndex;
  double soc;
  uint8_t pixel,attr,pl,al;
  uint32_t palette[16];
  uint8_t keyboard[8];
  uint8_t mic,ear;
  uint32_t level;
  uint8_t joyState;
  uint32_t cassetteT;
  //bool cassetteRunning;
  rvmTapeDecoderProtocolS *cassetteDecoder;
  //int16_t audioBuffer[882<<1];
  int16_t audioBuffer[3840<<1];
  //double audioLevelL,audioLevelR;
  
  rvmSpeccyStep step;
  rvmSpeccyStep frameF;
  uint8_t **ram;
  uint8_t **rom;

  z80* cpu;
  rvmAudioMixerS *mixer;

$if machineIs('128k') then
  double soundChannels[4];
$else
  double soundChannels[1];
$end

$if machineIs('inves') then
  uint8_t portFELatch; 
  uint8_t attrLatch;
$end

$if machineIs('128k','+2A','+3') then
//Spectrum128
//
  uint8_t memory7f; //last 0x7ffd
  uint8_t aySelect;
  rvmAY3819XT *ay;

$if machineIs('+2A','+3') then
//Spectrum +2A
//
  uint8_t memory1f;

$end  

$if machineIs('+3') then
//Spectrum +3
//
  rvmUpd765S *upd765;
  int16_t *motorSound,*motorLast,*motor;
  int16_t *seekSound,*seekLast,*seek;
  uint32_t ledA,ledB;

$end  
$end
}[=$structName$];

$if not isLua then
void init[=$name$]();
uint32_t s[=$name$]_cont4T(uint32_t l,uint32_t t);
uint32_t s[=$name$]_contention(z80 *z,uint16 a);
uint32_t s[=$name$]_contentionIO(z80 *z,uint16 a);
uint32_t floatingBus[=$name$](z80 * z);

uint32_t* step[=$name$]([=$structName$] *speccy,bool fast,uint32_t* buffer);
uint32_t* frame[=$name$]([=$structName$] *speccy,bool fast,uint32_t* buffer);
void s[=$name$]_set(z80* z,uint16_t a,uint8_t v);
uint8_t s[=$name$]_get(z80* z,uint16_t a);
void s[=$name$]_out(z80* z,uint16_t a,uint8_t v);
uint8_t s[=$name$]_busInt(z80* z);
uint8_t s[=$name$]_in(z80* z,uint16_t a);
void s[=$name$]_ack(z80*z);

$if machineIs('+2A') then
void sPlus2A_memoryConfig(spectrum *s,uint8 m7f,uint8 m1f);
$end

$if machineIs('128k') then
uint8_t s128k_AYin(rvmAY3819XT *h,uint16 a);
$end

$if machineIs('48k') then
uint32* snap[=$name$]([=$structName$] *speccy,uint32* buffer,uint8* mem,uint8 border);
void s[=$name$]_ack(z80* z);
$end

$else
]]

local r={}
local mMgr=require("[=$memMgrName$]")

function r.new(hardPtr)
  local rr={}
  rr.machine=ffi.cast("[=$structName$]*",hardPtr)
  rr.mem=mMgr.new(rr.machine)

  return rr
end

return r
$end